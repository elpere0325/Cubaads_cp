// <auto-generated />
using System;
using CubaAds.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CubaAds.Migrations
{
    [DbContext(typeof(DbCubaAdContext))]
    [Migration("20251010183233_CubaAds_Migration")]
    partial class CubaAds_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Ad", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ad_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("business_id")
                        .HasColumnType("uuid");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("media_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("media_url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("target_url")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("business_id");

                    b.ToTable("Ads");
                });

            modelBuilder.Entity("Entities.AdView", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ad_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("app_id")
                        .HasColumnType("uuid");

                    b.Property<decimal>("cost")
                        .HasColumnType("numeric");

                    b.Property<string>("device_id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("earned")
                        .HasColumnType("numeric");

                    b.HasKey("id");

                    b.HasIndex("ad_id");

                    b.HasIndex("app_id");

                    b.ToTable("AdViews");
                });

            modelBuilder.Entity("Entities.AppClient", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("api_key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("app_client_name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("app_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("balance")
                        .HasColumnType("numeric");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("api_key")
                        .IsUnique();

                    b.HasIndex("user_id");

                    b.ToTable("AppClients");
                });

            modelBuilder.Entity("Entities.Business", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("balance")
                        .HasColumnType("numeric");

                    b.Property<string>("business_name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("contact_email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("user_id")
                        .HasColumnType("uuid");

                    b.HasKey("id");

                    b.HasIndex("contact_email")
                        .IsUnique();

                    b.HasIndex("user_id");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("Entities.Campain", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ad_id")
                        .HasColumnType("uuid");

                    b.Property<int[]>("allowed_app_type")
                        .HasColumnType("integer[]");

                    b.Property<DateTime>("end_date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("max_views")
                        .HasColumnType("integer");

                    b.Property<int>("view_count")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("ad_id");

                    b.ToTable("Campains");
                });

            modelBuilder.Entity("Entities.ClickEvent", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ad_id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("app_id")
                        .HasColumnType("uuid");

                    b.Property<string>("device_ip")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("ad_id");

                    b.HasIndex("app_id");

                    b.ToTable("ClickEvents");
                });

            modelBuilder.Entity("Entities.Pricing", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ad_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("app_type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("cost_per_view")
                        .HasColumnType("numeric");

                    b.Property<decimal>("payout_per_view")
                        .HasColumnType("numeric");

                    b.HasKey("id");

                    b.ToTable("Pricings");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Property<Guid>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("refresh_token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("refresh_token_expire")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("rol")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.HasIndex("email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Entities.Ad", b =>
                {
                    b.HasOne("Entities.Business", "business")
                        .WithMany("Ads")
                        .HasForeignKey("business_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("business");
                });

            modelBuilder.Entity("Entities.AdView", b =>
                {
                    b.HasOne("Entities.Ad", "ad")
                        .WithMany("Adviews")
                        .HasForeignKey("ad_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.AppClient", "app_client")
                        .WithMany("AdViews")
                        .HasForeignKey("app_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ad");

                    b.Navigation("app_client");
                });

            modelBuilder.Entity("Entities.AppClient", b =>
                {
                    b.HasOne("Entities.User", "user")
                        .WithMany("AppClients")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Entities.Business", b =>
                {
                    b.HasOne("Entities.User", "user")
                        .WithMany("Businesses")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("Entities.Campain", b =>
                {
                    b.HasOne("Entities.Ad", "ad")
                        .WithMany("Campains")
                        .HasForeignKey("ad_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ad");
                });

            modelBuilder.Entity("Entities.ClickEvent", b =>
                {
                    b.HasOne("Entities.Ad", "ad")
                        .WithMany("ClickEvents")
                        .HasForeignKey("ad_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.AppClient", "app_client")
                        .WithMany("ClickEvents")
                        .HasForeignKey("app_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ad");

                    b.Navigation("app_client");
                });

            modelBuilder.Entity("Entities.Ad", b =>
                {
                    b.Navigation("Adviews");

                    b.Navigation("Campains");

                    b.Navigation("ClickEvents");
                });

            modelBuilder.Entity("Entities.AppClient", b =>
                {
                    b.Navigation("AdViews");

                    b.Navigation("ClickEvents");
                });

            modelBuilder.Entity("Entities.Business", b =>
                {
                    b.Navigation("Ads");
                });

            modelBuilder.Entity("Entities.User", b =>
                {
                    b.Navigation("AppClients");

                    b.Navigation("Businesses");
                });
#pragma warning restore 612, 618
        }
    }
}
